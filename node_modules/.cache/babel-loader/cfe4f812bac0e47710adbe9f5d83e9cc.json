{"ast":null,"code":"/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\n\nclass PrecacheInstallReportPlugin {\n  constructor() {\n    this.updatedURLs = [];\n    this.notUpdatedURLs = [];\n\n    this.handlerWillStart = async _ref => {\n      let {\n        request,\n        state\n      } = _ref;\n\n      // TODO: `state` should never be undefined...\n      if (state) {\n        state.originalRequest = request;\n      }\n    };\n\n    this.cachedResponseWillBeUsed = async _ref2 => {\n      let {\n        event,\n        state,\n        cachedResponse\n      } = _ref2;\n\n      if (event.type === 'install') {\n        if (state && state.originalRequest && state.originalRequest instanceof Request) {\n          // TODO: `state` should never be undefined...\n          const url = state.originalRequest.url;\n\n          if (cachedResponse) {\n            this.notUpdatedURLs.push(url);\n          } else {\n            this.updatedURLs.push(url);\n          }\n        }\n      }\n\n      return cachedResponse;\n    };\n  }\n\n}\n\nexport { PrecacheInstallReportPlugin };","map":{"version":3,"names":["PrecacheInstallReportPlugin","constructor","updatedURLs","notUpdatedURLs","handlerWillStart","request","state","originalRequest","cachedResponseWillBeUsed","event","cachedResponse","type","Request","url","push"],"sources":["C:/Users/omkar/OneDrive/Pictures/Desktop/weather/weather-app-reactjs/node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js"],"sourcesContent":["/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\nclass PrecacheInstallReportPlugin {\n    constructor() {\n        this.updatedURLs = [];\n        this.notUpdatedURLs = [];\n        this.handlerWillStart = async ({ request, state, }) => {\n            // TODO: `state` should never be undefined...\n            if (state) {\n                state.originalRequest = request;\n            }\n        };\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\n            if (event.type === 'install') {\n                if (state &&\n                    state.originalRequest &&\n                    state.originalRequest instanceof Request) {\n                    // TODO: `state` should never be undefined...\n                    const url = state.originalRequest.url;\n                    if (cachedResponse) {\n                        this.notUpdatedURLs.push(url);\n                    }\n                    else {\n                        this.updatedURLs.push(url);\n                    }\n                }\n            }\n            return cachedResponse;\n        };\n    }\n}\nexport { PrecacheInstallReportPlugin };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,gBAAP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMA,2BAAN,CAAkC;EAC9BC,WAAW,GAAG;IACV,KAAKC,WAAL,GAAmB,EAAnB;IACA,KAAKC,cAAL,GAAsB,EAAtB;;IACA,KAAKC,gBAAL,GAAwB,cAA+B;MAAA,IAAxB;QAAEC,OAAF;QAAWC;MAAX,CAAwB;;MACnD;MACA,IAAIA,KAAJ,EAAW;QACPA,KAAK,CAACC,eAAN,GAAwBF,OAAxB;MACH;IACJ,CALD;;IAMA,KAAKG,wBAAL,GAAgC,eAA6C;MAAA,IAAtC;QAAEC,KAAF;QAASH,KAAT;QAAgBI;MAAhB,CAAsC;;MACzE,IAAID,KAAK,CAACE,IAAN,KAAe,SAAnB,EAA8B;QAC1B,IAAIL,KAAK,IACLA,KAAK,CAACC,eADN,IAEAD,KAAK,CAACC,eAAN,YAAiCK,OAFrC,EAE8C;UAC1C;UACA,MAAMC,GAAG,GAAGP,KAAK,CAACC,eAAN,CAAsBM,GAAlC;;UACA,IAAIH,cAAJ,EAAoB;YAChB,KAAKP,cAAL,CAAoBW,IAApB,CAAyBD,GAAzB;UACH,CAFD,MAGK;YACD,KAAKX,WAAL,CAAiBY,IAAjB,CAAsBD,GAAtB;UACH;QACJ;MACJ;;MACD,OAAOH,cAAP;IACH,CAhBD;EAiBH;;AA3B6B;;AA6BlC,SAASV,2BAAT"},"metadata":{},"sourceType":"module"}