{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a `FetchEvent` using one or more\n * {@link workbox-routing.Route}, responding with a `Response` if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox-routing\n */\n\nclass Router {\n  /**\n   * Initializes a new Router.\n   */\n  constructor() {\n    this._routes = new Map();\n    this._defaultHandlerMap = new Map();\n  }\n  /**\n   * @return {Map<string, Array<workbox-routing.Route>>} routes A `Map` of HTTP\n   * method name ('GET', etc.) to an array of all the corresponding `Route`\n   * instances that are registered.\n   */\n\n\n  get routes() {\n    return this._routes;\n  }\n  /**\n   * Adds a fetch event listener to respond to events when a route matches\n   * the event's request.\n   */\n\n\n  addFetchListener() {\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n    self.addEventListener('fetch', event => {\n      const {\n        request\n      } = event;\n      const responsePromise = this.handleRequest({\n        request,\n        event\n      });\n\n      if (responsePromise) {\n        event.respondWith(responsePromise);\n      }\n    });\n  }\n  /**\n   * Adds a message event listener for URLs to cache from the window.\n   * This is useful to cache resources loaded on the page prior to when the\n   * service worker started controlling it.\n   *\n   * The format of the message data sent from the window should be as follows.\n   * Where the `urlsToCache` array may consist of URL strings or an array of\n   * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n   *\n   * ```\n   * {\n   *   type: 'CACHE_URLS',\n   *   payload: {\n   *     urlsToCache: [\n   *       './script1.js',\n   *       './script2.js',\n   *       ['./script3.js', {mode: 'no-cors'}],\n   *     ],\n   *   },\n   * }\n   * ```\n   */\n\n\n  addCacheListener() {\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n    self.addEventListener('message', event => {\n      // event.data is type 'any'\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (event.data && event.data.type === 'CACHE_URLS') {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const {\n          payload\n        } = event.data;\n\n        if (process.env.NODE_ENV !== 'production') {\n          logger.debug(\"Caching URLs from the window\", payload.urlsToCache);\n        }\n\n        const requestPromises = Promise.all(payload.urlsToCache.map(entry => {\n          if (typeof entry === 'string') {\n            entry = [entry];\n          }\n\n          const request = new Request(...entry);\n          return this.handleRequest({\n            request,\n            event\n          }); // TODO(philipwalton): TypeScript errors without this typecast for\n          // some reason (probably a bug). The real type here should work but\n          // doesn't: `Array<Promise<Response> | undefined>`.\n        })); // TypeScript\n\n        event.waitUntil(requestPromises); // If a MessageChannel was used, reply to the message on success.\n\n        if (event.ports && event.ports[0]) {\n          void requestPromises.then(() => event.ports[0].postMessage(true));\n        }\n      }\n    });\n  }\n  /**\n   * Apply the routing rules to a FetchEvent object to get a Response from an\n   * appropriate Route's handler.\n   *\n   * @param {Object} options\n   * @param {Request} options.request The request to handle.\n   * @param {ExtendableEvent} options.event The event that triggered the\n   *     request.\n   * @return {Promise<Response>|undefined} A promise is returned if a\n   *     registered route can handle the request. If there is no matching\n   *     route and there's no `defaultHandler`, `undefined` is returned.\n   */\n\n\n  handleRequest(_ref) {\n    let {\n      request,\n      event\n    } = _ref;\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'handleRequest',\n        paramName: 'options.request'\n      });\n    }\n\n    const url = new URL(request.url, location.href);\n\n    if (!url.protocol.startsWith('http')) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.debug(\"Workbox Router only supports URLs that start with 'http'.\");\n      }\n\n      return;\n    }\n\n    const sameOrigin = url.origin === location.origin;\n    const {\n      params,\n      route\n    } = this.findMatchingRoute({\n      event,\n      request,\n      sameOrigin,\n      url\n    });\n    let handler = route && route.handler;\n    const debugMessages = [];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (handler) {\n        debugMessages.push([\"Found a route to handle this request:\", route]);\n\n        if (params) {\n          debugMessages.push([\"Passing the following params to the route's handler:\", params]);\n        }\n      }\n    } // If we don't have a handler because there was no matching route, then\n    // fall back to defaultHandler if that's defined.\n\n\n    const method = request.method;\n\n    if (!handler && this._defaultHandlerMap.has(method)) {\n      if (process.env.NODE_ENV !== 'production') {\n        debugMessages.push(\"Failed to find a matching route. Falling \" + \"back to the default handler for \".concat(method, \".\"));\n      }\n\n      handler = this._defaultHandlerMap.get(method);\n    }\n\n    if (!handler) {\n      if (process.env.NODE_ENV !== 'production') {\n        // No handler so Workbox will do nothing. If logs is set of debug\n        // i.e. verbose, we should print out this information.\n        logger.debug(\"No route found for: \".concat(getFriendlyURL(url)));\n      }\n\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // We have a handler, meaning Workbox is going to handle the route.\n      // print the routing details to the console.\n      logger.groupCollapsed(\"Router is responding to: \".concat(getFriendlyURL(url)));\n      debugMessages.forEach(msg => {\n        if (Array.isArray(msg)) {\n          logger.log(...msg);\n        } else {\n          logger.log(msg);\n        }\n      });\n      logger.groupEnd();\n    } // Wrap in try and catch in case the handle method throws a synchronous\n    // error. It should still callback to the catch handler.\n\n\n    let responsePromise;\n\n    try {\n      responsePromise = handler.handle({\n        url,\n        request,\n        event,\n        params\n      });\n    } catch (err) {\n      responsePromise = Promise.reject(err);\n    } // Get route's catch handler, if it exists\n\n\n    const catchHandler = route && route.catchHandler;\n\n    if (responsePromise instanceof Promise && (this._catchHandler || catchHandler)) {\n      responsePromise = responsePromise.catch(async err => {\n        // If there's a route catch handler, process that first\n        if (catchHandler) {\n          if (process.env.NODE_ENV !== 'production') {\n            // Still include URL here as it will be async from the console group\n            // and may not make sense without the URL\n            logger.groupCollapsed(\"Error thrown when responding to: \" + \" \".concat(getFriendlyURL(url), \". Falling back to route's Catch Handler.\"));\n            logger.error(\"Error thrown by:\", route);\n            logger.error(err);\n            logger.groupEnd();\n          }\n\n          try {\n            return await catchHandler.handle({\n              url,\n              request,\n              event,\n              params\n            });\n          } catch (catchErr) {\n            if (catchErr instanceof Error) {\n              err = catchErr;\n            }\n          }\n        }\n\n        if (this._catchHandler) {\n          if (process.env.NODE_ENV !== 'production') {\n            // Still include URL here as it will be async from the console group\n            // and may not make sense without the URL\n            logger.groupCollapsed(\"Error thrown when responding to: \" + \" \".concat(getFriendlyURL(url), \". Falling back to global Catch Handler.\"));\n            logger.error(\"Error thrown by:\", route);\n            logger.error(err);\n            logger.groupEnd();\n          }\n\n          return this._catchHandler.handle({\n            url,\n            request,\n            event\n          });\n        }\n\n        throw err;\n      });\n    }\n\n    return responsePromise;\n  }\n  /**\n   * Checks a request and URL (and optionally an event) against the list of\n   * registered routes, and if there's a match, returns the corresponding\n   * route along with any params generated by the match.\n   *\n   * @param {Object} options\n   * @param {URL} options.url\n   * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n   *     against the current origin.\n   * @param {Request} options.request The request to match.\n   * @param {Event} options.event The corresponding event.\n   * @return {Object} An object with `route` and `params` properties.\n   *     They are populated if a matching route was found or `undefined`\n   *     otherwise.\n   */\n\n\n  findMatchingRoute(_ref2) {\n    let {\n      url,\n      sameOrigin,\n      request,\n      event\n    } = _ref2;\n    const routes = this._routes.get(request.method) || [];\n\n    for (const route of routes) {\n      let params; // route.match returns type any, not possible to change right now.\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n      const matchResult = route.match({\n        url,\n        sameOrigin,\n        request,\n        event\n      });\n\n      if (matchResult) {\n        if (process.env.NODE_ENV !== 'production') {\n          // Warn developers that using an async matchCallback is almost always\n          // not the right thing to do.\n          if (matchResult instanceof Promise) {\n            logger.warn(\"While routing \".concat(getFriendlyURL(url), \", an async \") + \"matchCallback function was used. Please convert the \" + \"following route to use a synchronous matchCallback function:\", route);\n          }\n        } // See https://github.com/GoogleChrome/workbox/issues/2079\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n\n        params = matchResult;\n\n        if (Array.isArray(params) && params.length === 0) {\n          // Instead of passing an empty array in as params, use undefined.\n          params = undefined;\n        } else if (matchResult.constructor === Object && // eslint-disable-line\n        Object.keys(matchResult).length === 0) {\n          // Instead of passing an empty object in as params, use undefined.\n          params = undefined;\n        } else if (typeof matchResult === 'boolean') {\n          // For the boolean value true (rather than just something truth-y),\n          // don't set params.\n          // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n          params = undefined;\n        } // Return early if have a match.\n\n\n        return {\n          route,\n          params\n        };\n      }\n    } // If no match was found above, return and empty object.\n\n\n    return {};\n  }\n  /**\n   * Define a default `handler` that's called when no routes explicitly\n   * match the incoming request.\n   *\n   * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n   *\n   * Without a default handler, unmatched requests will go against the\n   * network as if there were no service worker present.\n   *\n   * @param {workbox-routing~handlerCallback} handler A callback\n   * function that returns a Promise resulting in a Response.\n   * @param {string} [method='GET'] The HTTP method to associate with this\n   * default handler. Each method has its own default.\n   */\n\n\n  setDefaultHandler(handler) {\n    let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultMethod;\n\n    this._defaultHandlerMap.set(method, normalizeHandler(handler));\n  }\n  /**\n   * If a Route throws an error while handling a request, this `handler`\n   * will be called and given a chance to provide a response.\n   *\n   * @param {workbox-routing~handlerCallback} handler A callback\n   * function that returns a Promise resulting in a Response.\n   */\n\n\n  setCatchHandler(handler) {\n    this._catchHandler = normalizeHandler(handler);\n  }\n  /**\n   * Registers a route with the router.\n   *\n   * @param {workbox-routing.Route} route The route to register.\n   */\n\n\n  registerRoute(route) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(route, 'object', {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'registerRoute',\n        paramName: 'route'\n      });\n      assert.hasMethod(route, 'match', {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'registerRoute',\n        paramName: 'route'\n      });\n      assert.isType(route.handler, 'object', {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'registerRoute',\n        paramName: 'route'\n      });\n      assert.hasMethod(route.handler, 'handle', {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'registerRoute',\n        paramName: 'route.handler'\n      });\n      assert.isType(route.method, 'string', {\n        moduleName: 'workbox-routing',\n        className: 'Router',\n        funcName: 'registerRoute',\n        paramName: 'route.method'\n      });\n    }\n\n    if (!this._routes.has(route.method)) {\n      this._routes.set(route.method, []);\n    } // Give precedence to all of the earlier routes by adding this additional\n    // route to the end of the array.\n\n\n    this._routes.get(route.method).push(route);\n  }\n  /**\n   * Unregisters a route with the router.\n   *\n   * @param {workbox-routing.Route} route The route to unregister.\n   */\n\n\n  unregisterRoute(route) {\n    if (!this._routes.has(route.method)) {\n      throw new WorkboxError('unregister-route-but-not-found-with-method', {\n        method: route.method\n      });\n    }\n\n    const routeIndex = this._routes.get(route.method).indexOf(route);\n\n    if (routeIndex > -1) {\n      this._routes.get(route.method).splice(routeIndex, 1);\n    } else {\n      throw new WorkboxError('unregister-route-route-not-registered');\n    }\n  }\n\n}\n\nexport { Router };","map":{"version":3,"names":["assert","getFriendlyURL","defaultMethod","logger","normalizeHandler","WorkboxError","Router","constructor","_routes","Map","_defaultHandlerMap","routes","addFetchListener","self","addEventListener","event","request","responsePromise","handleRequest","respondWith","addCacheListener","data","type","payload","process","env","NODE_ENV","debug","urlsToCache","requestPromises","Promise","all","map","entry","Request","waitUntil","ports","then","postMessage","isInstance","moduleName","className","funcName","paramName","url","URL","location","href","protocol","startsWith","sameOrigin","origin","params","route","findMatchingRoute","handler","debugMessages","push","method","has","get","groupCollapsed","forEach","msg","Array","isArray","log","groupEnd","handle","err","reject","catchHandler","_catchHandler","catch","error","catchErr","Error","matchResult","match","warn","length","undefined","Object","keys","setDefaultHandler","set","setCatchHandler","registerRoute","isType","hasMethod","unregisterRoute","routeIndex","indexOf","splice"],"sources":["C:/Users/omkar/OneDrive/Pictures/Desktop/weather/weather-app-reactjs/node_modules/workbox-routing/Router.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a `FetchEvent` using one or more\n * {@link workbox-routing.Route}, responding with a `Response` if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            // event.data is type 'any'\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    void requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event, }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([`Found a route to handle this request:`, route]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`,\n                        params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise &&\n            (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({ url, request, event, params });\n                    }\n                    catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({ url, request, event });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event, }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({ url, sameOrigin, request, event });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do.\n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if (matchResult.constructor === Object && // eslint-disable-line\n                    Object.keys(matchResult).length === 0) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}