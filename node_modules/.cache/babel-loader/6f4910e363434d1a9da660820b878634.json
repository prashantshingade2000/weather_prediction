{"ast":null,"code":"/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { Route } from 'workbox-routing/Route.js';\nimport { generateURLVariations } from './utils/generateURLVariations.js';\nimport './_version.js';\n/**\n * A subclass of {@link workbox-routing.Route} that takes a\n * {@link workbox-precaching.PrecacheController}\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n *\n * @memberof workbox-precaching\n * @extends workbox-routing.Route\n */\n\nclass PrecacheRoute extends Route {\n  /**\n   * @param {PrecacheController} precacheController A `PrecacheController`\n   * instance used to both match requests and respond to fetch events.\n   * @param {Object} [options] Options to control how requests are matched\n   * against the list of precached URLs.\n   * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n   * check cache entries for a URLs ending with '/' to see if there is a hit when\n   * appending the `directoryIndex` value.\n   * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\n   * array of regex's to remove search params when looking for a cache match.\n   * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n   * check the cache for the URL with a `.html` added to the end of the end.\n   * @param {workbox-precaching~urlManipulation} [options.urlManipulation]\n   * This is a function that should take a URL and return an array of\n   * alternative URLs that should be checked for precache matches.\n   */\n  constructor(precacheController, options) {\n    const match = _ref => {\n      let {\n        request\n      } = _ref;\n      const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n\n      for (const possibleURL of generateURLVariations(request.url, options)) {\n        const cacheKey = urlsToCacheKeys.get(possibleURL);\n\n        if (cacheKey) {\n          const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\n          return {\n            cacheKey,\n            integrity\n          };\n        }\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        logger.debug(\"Precaching did not find a match for \" + getFriendlyURL(request.url));\n      }\n\n      return;\n    };\n\n    super(match, precacheController.strategy);\n  }\n\n}\n\nexport { PrecacheRoute };","map":{"version":3,"names":["logger","getFriendlyURL","Route","generateURLVariations","PrecacheRoute","constructor","precacheController","options","match","request","urlsToCacheKeys","getURLsToCacheKeys","possibleURL","url","cacheKey","get","integrity","getIntegrityForCacheKey","process","env","NODE_ENV","debug","strategy"],"sources":["C:/Users/omkar/OneDrive/Pictures/Desktop/weather/weather-app-reactjs/node_modules/workbox-precaching/PrecacheRoute.js"],"sourcesContent":["/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { Route } from 'workbox-routing/Route.js';\nimport { generateURLVariations } from './utils/generateURLVariations.js';\nimport './_version.js';\n/**\n * A subclass of {@link workbox-routing.Route} that takes a\n * {@link workbox-precaching.PrecacheController}\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n *\n * @memberof workbox-precaching\n * @extends workbox-routing.Route\n */\nclass PrecacheRoute extends Route {\n    /**\n     * @param {PrecacheController} precacheController A `PrecacheController`\n     * instance used to both match requests and respond to fetch events.\n     * @param {Object} [options] Options to control how requests are matched\n     * against the list of precached URLs.\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\n     * appending the `directoryIndex` value.\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\n     * array of regex's to remove search params when looking for a cache match.\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n     * check the cache for the URL with a `.html` added to the end of the end.\n     * @param {workbox-precaching~urlManipulation} [options.urlManipulation]\n     * This is a function that should take a URL and return an array of\n     * alternative URLs that should be checked for precache matches.\n     */\n    constructor(precacheController, options) {\n        const match = ({ request, }) => {\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n            for (const possibleURL of generateURLVariations(request.url, options)) {\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\n                    return { cacheKey, integrity };\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` + getFriendlyURL(request.url));\n            }\n            return;\n        };\n        super(match, precacheController.strategy);\n    }\n}\nexport { PrecacheRoute };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,iCAAvB;AACA,SAASC,cAAT,QAA+B,yCAA/B;AACA,SAASC,KAAT,QAAsB,0BAAtB;AACA,SAASC,qBAAT,QAAsC,kCAAtC;AACA,OAAO,eAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,aAAN,SAA4BF,KAA5B,CAAkC;EAC9B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIG,WAAW,CAACC,kBAAD,EAAqBC,OAArB,EAA8B;IACrC,MAAMC,KAAK,GAAG,QAAkB;MAAA,IAAjB;QAAEC;MAAF,CAAiB;MAC5B,MAAMC,eAAe,GAAGJ,kBAAkB,CAACK,kBAAnB,EAAxB;;MACA,KAAK,MAAMC,WAAX,IAA0BT,qBAAqB,CAACM,OAAO,CAACI,GAAT,EAAcN,OAAd,CAA/C,EAAuE;QACnE,MAAMO,QAAQ,GAAGJ,eAAe,CAACK,GAAhB,CAAoBH,WAApB,CAAjB;;QACA,IAAIE,QAAJ,EAAc;UACV,MAAME,SAAS,GAAGV,kBAAkB,CAACW,uBAAnB,CAA2CH,QAA3C,CAAlB;UACA,OAAO;YAAEA,QAAF;YAAYE;UAAZ,CAAP;QACH;MACJ;;MACD,IAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;QACvCpB,MAAM,CAACqB,KAAP,CAAa,yCAAyCpB,cAAc,CAACQ,OAAO,CAACI,GAAT,CAApE;MACH;;MACD;IACH,CAbD;;IAcA,MAAML,KAAN,EAAaF,kBAAkB,CAACgB,QAAhC;EACH;;AAjC6B;;AAmClC,SAASlB,aAAT"},"metadata":{},"sourceType":"module"}