{"ast":null,"code":"/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof workbox-core\n */\n\nasync function copyResponse(response, modifier) {\n  let origin = null; // If response.url isn't set, assume it's cross-origin and keep origin null.\n\n  if (response.url) {\n    const responseURL = new URL(response.url);\n    origin = responseURL.origin;\n  }\n\n  if (origin !== self.location.origin) {\n    throw new WorkboxError('cross-origin-copy-response', {\n      origin\n    });\n  }\n\n  const clonedResponse = response.clone(); // Create a fresh `ResponseInit` object by cloning the headers.\n\n  const responseInit = {\n    headers: new Headers(clonedResponse.headers),\n    status: clonedResponse.status,\n    statusText: clonedResponse.statusText\n  }; // Apply any user modifications.\n\n  const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit; // Create the new response from the body stream and `ResponseInit`\n  // modifications. Note: not all browsers support the Response.body stream,\n  // so fall back to reading the entire body into memory as a blob.\n\n  const body = canConstructResponseFromBodyStream() ? clonedResponse.body : await clonedResponse.blob();\n  return new Response(body, modifiedResponseInit);\n}\n\nexport { copyResponse };","map":{"version":3,"names":["canConstructResponseFromBodyStream","WorkboxError","copyResponse","response","modifier","origin","url","responseURL","URL","self","location","clonedResponse","clone","responseInit","headers","Headers","status","statusText","modifiedResponseInit","body","blob","Response"],"sources":["C:/Users/omkar/OneDrive/Pictures/Desktop/weather/weather-app-reactjs/node_modules/workbox-core/copyResponse.js"],"sourcesContent":["/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof workbox-core\n */\nasync function copyResponse(response, modifier) {\n    let origin = null;\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new WorkboxError('cross-origin-copy-response', { origin });\n    }\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText,\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = canConstructResponseFromBodyStream()\n        ? clonedResponse.body\n        : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\nexport { copyResponse };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,kCAAT,QAAmD,kDAAnD;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,OAAO,eAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAeC,YAAf,CAA4BC,QAA5B,EAAsCC,QAAtC,EAAgD;EAC5C,IAAIC,MAAM,GAAG,IAAb,CAD4C,CAE5C;;EACA,IAAIF,QAAQ,CAACG,GAAb,EAAkB;IACd,MAAMC,WAAW,GAAG,IAAIC,GAAJ,CAAQL,QAAQ,CAACG,GAAjB,CAApB;IACAD,MAAM,GAAGE,WAAW,CAACF,MAArB;EACH;;EACD,IAAIA,MAAM,KAAKI,IAAI,CAACC,QAAL,CAAcL,MAA7B,EAAqC;IACjC,MAAM,IAAIJ,YAAJ,CAAiB,4BAAjB,EAA+C;MAAEI;IAAF,CAA/C,CAAN;EACH;;EACD,MAAMM,cAAc,GAAGR,QAAQ,CAACS,KAAT,EAAvB,CAV4C,CAW5C;;EACA,MAAMC,YAAY,GAAG;IACjBC,OAAO,EAAE,IAAIC,OAAJ,CAAYJ,cAAc,CAACG,OAA3B,CADQ;IAEjBE,MAAM,EAAEL,cAAc,CAACK,MAFN;IAGjBC,UAAU,EAAEN,cAAc,CAACM;EAHV,CAArB,CAZ4C,CAiB5C;;EACA,MAAMC,oBAAoB,GAAGd,QAAQ,GAAGA,QAAQ,CAACS,YAAD,CAAX,GAA4BA,YAAjE,CAlB4C,CAmB5C;EACA;EACA;;EACA,MAAMM,IAAI,GAAGnB,kCAAkC,KACzCW,cAAc,CAACQ,IAD0B,GAEzC,MAAMR,cAAc,CAACS,IAAf,EAFZ;EAGA,OAAO,IAAIC,QAAJ,CAAaF,IAAb,EAAmBD,oBAAnB,CAAP;AACH;;AACD,SAAShB,YAAT"},"metadata":{},"sourceType":"module"}