{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network-only](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-only)\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins](https://developer.chrome.com/docs/workbox/using-plugins/).\n *\n * If the network request fails, this will throw a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\n\nclass NetworkOnly extends Strategy {\n  /**\n   * @param {Object} [options]\n   * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} [options.fetchOptions] Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n   * `fetch()` requests made by this strategy.\n   * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n   * that fail to respond within the timeout will result in a network error.\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(options);\n    this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n  }\n  /**\n   * @private\n   * @param {Request|string} request A request to run this strategy for.\n   * @param {workbox-strategies.StrategyHandler} handler The event that\n   *     triggered the request.\n   * @return {Promise<Response>}\n   */\n\n\n  async _handle(request, handler) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-strategies',\n        className: this.constructor.name,\n        funcName: '_handle',\n        paramName: 'request'\n      });\n    }\n\n    let error = undefined;\n    let response;\n\n    try {\n      const promises = [handler.fetch(request)];\n\n      if (this._networkTimeoutSeconds) {\n        const timeoutPromise = timeout(this._networkTimeoutSeconds * 1000);\n        promises.push(timeoutPromise);\n      }\n\n      response = await Promise.race(promises);\n\n      if (!response) {\n        throw new Error(\"Timed out the network response after \" + \"\".concat(this._networkTimeoutSeconds, \" seconds.\"));\n      }\n    } catch (err) {\n      if (err instanceof Error) {\n        error = err;\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n\n      if (response) {\n        logger.log(\"Got response from network.\");\n      } else {\n        logger.log(\"Unable to get a response from the network.\");\n      }\n\n      messages.printFinalResponse(response);\n      logger.groupEnd();\n    }\n\n    if (!response) {\n      throw new WorkboxError('no-response', {\n        url: request.url,\n        error\n      });\n    }\n\n    return response;\n  }\n\n}\n\nexport { NetworkOnly };","map":{"version":3,"names":["assert","logger","timeout","WorkboxError","Strategy","messages","NetworkOnly","constructor","options","_networkTimeoutSeconds","networkTimeoutSeconds","_handle","request","handler","process","env","NODE_ENV","isInstance","Request","moduleName","className","name","funcName","paramName","error","undefined","response","promises","fetch","timeoutPromise","push","Promise","race","Error","err","groupCollapsed","strategyStart","log","printFinalResponse","groupEnd","url"],"sources":["C:/Users/omkar/OneDrive/Pictures/Desktop/weather/weather-app-reactjs/node_modules/workbox-strategies/NetworkOnly.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network-only](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-only)\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins](https://developer.chrome.com/docs/workbox/using-plugins/).\n *\n * If the network request fails, this will throw a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass NetworkOnly extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will result in a network error.\n     */\n    constructor(options = {}) {\n        super(options);\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: '_handle',\n                paramName: 'request',\n            });\n        }\n        let error = undefined;\n        let response;\n        try {\n            const promises = [\n                handler.fetch(request),\n            ];\n            if (this._networkTimeoutSeconds) {\n                const timeoutPromise = timeout(this._networkTimeoutSeconds * 1000);\n                promises.push(timeoutPromise);\n            }\n            response = await Promise.race(promises);\n            if (!response) {\n                throw new Error(`Timed out the network response after ` +\n                    `${this._networkTimeoutSeconds} seconds.`);\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                error = err;\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            if (response) {\n                logger.log(`Got response from network.`);\n            }\n            else {\n                logger.log(`Unable to get a response from the network.`);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { NetworkOnly };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,iCAAvB;AACA,SAASC,MAAT,QAAuB,iCAAvB;AACA,SAASC,OAAT,QAAwB,kCAAxB;AACA,SAASC,YAAT,QAA6B,uCAA7B;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAO,eAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAN,SAA0BF,QAA1B,CAAmC;EAC/B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIG,WAAW,GAAe;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IACtB,MAAMA,OAAN;IACA,KAAKC,sBAAL,GAA8BD,OAAO,CAACE,qBAAR,IAAiC,CAA/D;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACiB,MAAPC,OAAO,CAACC,OAAD,EAAUC,OAAV,EAAmB;IAC5B,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;MACvChB,MAAM,CAACiB,UAAP,CAAkBL,OAAlB,EAA2BM,OAA3B,EAAoC;QAChCC,UAAU,EAAE,oBADoB;QAEhCC,SAAS,EAAE,KAAKb,WAAL,CAAiBc,IAFI;QAGhCC,QAAQ,EAAE,SAHsB;QAIhCC,SAAS,EAAE;MAJqB,CAApC;IAMH;;IACD,IAAIC,KAAK,GAAGC,SAAZ;IACA,IAAIC,QAAJ;;IACA,IAAI;MACA,MAAMC,QAAQ,GAAG,CACbd,OAAO,CAACe,KAAR,CAAchB,OAAd,CADa,CAAjB;;MAGA,IAAI,KAAKH,sBAAT,EAAiC;QAC7B,MAAMoB,cAAc,GAAG3B,OAAO,CAAC,KAAKO,sBAAL,GAA8B,IAA/B,CAA9B;QACAkB,QAAQ,CAACG,IAAT,CAAcD,cAAd;MACH;;MACDH,QAAQ,GAAG,MAAMK,OAAO,CAACC,IAAR,CAAaL,QAAb,CAAjB;;MACA,IAAI,CAACD,QAAL,EAAe;QACX,MAAM,IAAIO,KAAJ,CAAU,oDACT,KAAKxB,sBADI,cAAV,CAAN;MAEH;IACJ,CAbD,CAcA,OAAOyB,GAAP,EAAY;MACR,IAAIA,GAAG,YAAYD,KAAnB,EAA0B;QACtBT,KAAK,GAAGU,GAAR;MACH;IACJ;;IACD,IAAIpB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;MACvCf,MAAM,CAACkC,cAAP,CAAsB9B,QAAQ,CAAC+B,aAAT,CAAuB,KAAK7B,WAAL,CAAiBc,IAAxC,EAA8CT,OAA9C,CAAtB;;MACA,IAAIc,QAAJ,EAAc;QACVzB,MAAM,CAACoC,GAAP;MACH,CAFD,MAGK;QACDpC,MAAM,CAACoC,GAAP;MACH;;MACDhC,QAAQ,CAACiC,kBAAT,CAA4BZ,QAA5B;MACAzB,MAAM,CAACsC,QAAP;IACH;;IACD,IAAI,CAACb,QAAL,EAAe;MACX,MAAM,IAAIvB,YAAJ,CAAiB,aAAjB,EAAgC;QAAEqC,GAAG,EAAE5B,OAAO,CAAC4B,GAAf;QAAoBhB;MAApB,CAAhC,CAAN;IACH;;IACD,OAAOE,QAAP;EACH;;AApE8B;;AAsEnC,SAASpB,WAAT"},"metadata":{},"sourceType":"module"}