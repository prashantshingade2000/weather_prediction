{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { openDB, deleteDB } from 'idb';\nimport '../_version.js';\nconst DB_NAME = 'workbox-expiration';\nconst CACHE_OBJECT_STORE = 'cache-entries';\n\nconst normalizeURL = unNormalizedUrl => {\n  const url = new URL(unNormalizedUrl, location.href);\n  url.hash = '';\n  return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\n\n\nclass CacheTimestampsModel {\n  /**\n   *\n   * @param {string} cacheName\n   *\n   * @private\n   */\n  constructor(cacheName) {\n    this._db = null;\n    this._cacheName = cacheName;\n  }\n  /**\n   * Performs an upgrade of indexedDB.\n   *\n   * @param {IDBPDatabase<CacheDbSchema>} db\n   *\n   * @private\n   */\n\n\n  _upgradeDb(db) {\n    // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n    // have to use the `id` keyPath here and create our own values (a\n    // concatenation of `url + cacheName`) instead of simply using\n    // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n    const objStore = db.createObjectStore(CACHE_OBJECT_STORE, {\n      keyPath: 'id'\n    }); // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n    // create a single index with the keyPath `['cacheName', 'timestamp']`\n    // instead of doing both these indexes.\n\n    objStore.createIndex('cacheName', 'cacheName', {\n      unique: false\n    });\n    objStore.createIndex('timestamp', 'timestamp', {\n      unique: false\n    });\n  }\n  /**\n   * Performs an upgrade of indexedDB and deletes deprecated DBs.\n   *\n   * @param {IDBPDatabase<CacheDbSchema>} db\n   *\n   * @private\n   */\n\n\n  _upgradeDbAndDeleteOldDbs(db) {\n    this._upgradeDb(db);\n\n    if (this._cacheName) {\n      void deleteDB(this._cacheName);\n    }\n  }\n  /**\n   * @param {string} url\n   * @param {number} timestamp\n   *\n   * @private\n   */\n\n\n  async setTimestamp(url, timestamp) {\n    url = normalizeURL(url);\n    const entry = {\n      url,\n      timestamp,\n      cacheName: this._cacheName,\n      // Creating an ID from the URL and cache name won't be necessary once\n      // Edge switches to Chromium and all browsers we support work with\n      // array keyPaths.\n      id: this._getId(url)\n    };\n    const db = await this.getDb();\n    const tx = db.transaction(CACHE_OBJECT_STORE, 'readwrite', {\n      durability: 'relaxed'\n    });\n    await tx.store.put(entry);\n    await tx.done;\n  }\n  /**\n   * Returns the timestamp stored for a given URL.\n   *\n   * @param {string} url\n   * @return {number | undefined}\n   *\n   * @private\n   */\n\n\n  async getTimestamp(url) {\n    const db = await this.getDb();\n    const entry = await db.get(CACHE_OBJECT_STORE, this._getId(url));\n    return entry === null || entry === void 0 ? void 0 : entry.timestamp;\n  }\n  /**\n   * Iterates through all the entries in the object store (from newest to\n   * oldest) and removes entries once either `maxCount` is reached or the\n   * entry's timestamp is less than `minTimestamp`.\n   *\n   * @param {number} minTimestamp\n   * @param {number} maxCount\n   * @return {Array<string>}\n   *\n   * @private\n   */\n\n\n  async expireEntries(minTimestamp, maxCount) {\n    const db = await this.getDb();\n    let cursor = await db.transaction(CACHE_OBJECT_STORE).store.index('timestamp').openCursor(null, 'prev');\n    const entriesToDelete = [];\n    let entriesNotDeletedCount = 0;\n\n    while (cursor) {\n      const result = cursor.value; // TODO(philipwalton): once we can use a multi-key index, we\n      // won't have to check `cacheName` here.\n\n      if (result.cacheName === this._cacheName) {\n        // Delete an entry if it's older than the max age or\n        // if we already have the max number allowed.\n        if (minTimestamp && result.timestamp < minTimestamp || maxCount && entriesNotDeletedCount >= maxCount) {\n          // TODO(philipwalton): we should be able to delete the\n          // entry right here, but doing so causes an iteration\n          // bug in Safari stable (fixed in TP). Instead we can\n          // store the keys of the entries to delete, and then\n          // delete the separate transactions.\n          // https://github.com/GoogleChrome/workbox/issues/1978\n          // cursor.delete();\n          // We only need to return the URL, not the whole entry.\n          entriesToDelete.push(cursor.value);\n        } else {\n          entriesNotDeletedCount++;\n        }\n      }\n\n      cursor = await cursor.continue();\n    } // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n    // we should be able to remove this loop and do the entry deletion in the\n    // cursor loop above:\n    // https://github.com/GoogleChrome/workbox/issues/1978\n\n\n    const urlsDeleted = [];\n\n    for (const entry of entriesToDelete) {\n      await db.delete(CACHE_OBJECT_STORE, entry.id);\n      urlsDeleted.push(entry.url);\n    }\n\n    return urlsDeleted;\n  }\n  /**\n   * Takes a URL and returns an ID that will be unique in the object store.\n   *\n   * @param {string} url\n   * @return {string}\n   *\n   * @private\n   */\n\n\n  _getId(url) {\n    // Creating an ID from the URL and cache name won't be necessary once\n    // Edge switches to Chromium and all browsers we support work with\n    // array keyPaths.\n    return this._cacheName + '|' + normalizeURL(url);\n  }\n  /**\n   * Returns an open connection to the database.\n   *\n   * @private\n   */\n\n\n  async getDb() {\n    if (!this._db) {\n      this._db = await openDB(DB_NAME, 1, {\n        upgrade: this._upgradeDbAndDeleteOldDbs.bind(this)\n      });\n    }\n\n    return this._db;\n  }\n\n}\n\nexport { CacheTimestampsModel };","map":{"version":3,"names":["openDB","deleteDB","DB_NAME","CACHE_OBJECT_STORE","normalizeURL","unNormalizedUrl","url","URL","location","href","hash","CacheTimestampsModel","constructor","cacheName","_db","_cacheName","_upgradeDb","db","objStore","createObjectStore","keyPath","createIndex","unique","_upgradeDbAndDeleteOldDbs","setTimestamp","timestamp","entry","id","_getId","getDb","tx","transaction","durability","store","put","done","getTimestamp","get","expireEntries","minTimestamp","maxCount","cursor","index","openCursor","entriesToDelete","entriesNotDeletedCount","result","value","push","continue","urlsDeleted","delete","upgrade","bind"],"sources":["C:/Users/omkar/OneDrive/Pictures/Desktop/weather/weather-app-reactjs/node_modules/workbox-expiration/models/CacheTimestampsModel.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { openDB, deleteDB } from 'idb';\nimport '../_version.js';\nconst DB_NAME = 'workbox-expiration';\nconst CACHE_OBJECT_STORE = 'cache-entries';\nconst normalizeURL = (unNormalizedUrl) => {\n    const url = new URL(unNormalizedUrl, location.href);\n    url.hash = '';\n    return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\nclass CacheTimestampsModel {\n    /**\n     *\n     * @param {string} cacheName\n     *\n     * @private\n     */\n    constructor(cacheName) {\n        this._db = null;\n        this._cacheName = cacheName;\n    }\n    /**\n     * Performs an upgrade of indexedDB.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n    _upgradeDb(db) {\n        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n        // have to use the `id` keyPath here and create our own values (a\n        // concatenation of `url + cacheName`) instead of simply using\n        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n        const objStore = db.createObjectStore(CACHE_OBJECT_STORE, { keyPath: 'id' });\n        // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n        // create a single index with the keyPath `['cacheName', 'timestamp']`\n        // instead of doing both these indexes.\n        objStore.createIndex('cacheName', 'cacheName', { unique: false });\n        objStore.createIndex('timestamp', 'timestamp', { unique: false });\n    }\n    /**\n     * Performs an upgrade of indexedDB and deletes deprecated DBs.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n    _upgradeDbAndDeleteOldDbs(db) {\n        this._upgradeDb(db);\n        if (this._cacheName) {\n            void deleteDB(this._cacheName);\n        }\n    }\n    /**\n     * @param {string} url\n     * @param {number} timestamp\n     *\n     * @private\n     */\n    async setTimestamp(url, timestamp) {\n        url = normalizeURL(url);\n        const entry = {\n            url,\n            timestamp,\n            cacheName: this._cacheName,\n            // Creating an ID from the URL and cache name won't be necessary once\n            // Edge switches to Chromium and all browsers we support work with\n            // array keyPaths.\n            id: this._getId(url),\n        };\n        const db = await this.getDb();\n        const tx = db.transaction(CACHE_OBJECT_STORE, 'readwrite', {\n            durability: 'relaxed',\n        });\n        await tx.store.put(entry);\n        await tx.done;\n    }\n    /**\n     * Returns the timestamp stored for a given URL.\n     *\n     * @param {string} url\n     * @return {number | undefined}\n     *\n     * @private\n     */\n    async getTimestamp(url) {\n        const db = await this.getDb();\n        const entry = await db.get(CACHE_OBJECT_STORE, this._getId(url));\n        return entry === null || entry === void 0 ? void 0 : entry.timestamp;\n    }\n    /**\n     * Iterates through all the entries in the object store (from newest to\n     * oldest) and removes entries once either `maxCount` is reached or the\n     * entry's timestamp is less than `minTimestamp`.\n     *\n     * @param {number} minTimestamp\n     * @param {number} maxCount\n     * @return {Array<string>}\n     *\n     * @private\n     */\n    async expireEntries(minTimestamp, maxCount) {\n        const db = await this.getDb();\n        let cursor = await db\n            .transaction(CACHE_OBJECT_STORE)\n            .store.index('timestamp')\n            .openCursor(null, 'prev');\n        const entriesToDelete = [];\n        let entriesNotDeletedCount = 0;\n        while (cursor) {\n            const result = cursor.value;\n            // TODO(philipwalton): once we can use a multi-key index, we\n            // won't have to check `cacheName` here.\n            if (result.cacheName === this._cacheName) {\n                // Delete an entry if it's older than the max age or\n                // if we already have the max number allowed.\n                if ((minTimestamp && result.timestamp < minTimestamp) ||\n                    (maxCount && entriesNotDeletedCount >= maxCount)) {\n                    // TODO(philipwalton): we should be able to delete the\n                    // entry right here, but doing so causes an iteration\n                    // bug in Safari stable (fixed in TP). Instead we can\n                    // store the keys of the entries to delete, and then\n                    // delete the separate transactions.\n                    // https://github.com/GoogleChrome/workbox/issues/1978\n                    // cursor.delete();\n                    // We only need to return the URL, not the whole entry.\n                    entriesToDelete.push(cursor.value);\n                }\n                else {\n                    entriesNotDeletedCount++;\n                }\n            }\n            cursor = await cursor.continue();\n        }\n        // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n        // we should be able to remove this loop and do the entry deletion in the\n        // cursor loop above:\n        // https://github.com/GoogleChrome/workbox/issues/1978\n        const urlsDeleted = [];\n        for (const entry of entriesToDelete) {\n            await db.delete(CACHE_OBJECT_STORE, entry.id);\n            urlsDeleted.push(entry.url);\n        }\n        return urlsDeleted;\n    }\n    /**\n     * Takes a URL and returns an ID that will be unique in the object store.\n     *\n     * @param {string} url\n     * @return {string}\n     *\n     * @private\n     */\n    _getId(url) {\n        // Creating an ID from the URL and cache name won't be necessary once\n        // Edge switches to Chromium and all browsers we support work with\n        // array keyPaths.\n        return this._cacheName + '|' + normalizeURL(url);\n    }\n    /**\n     * Returns an open connection to the database.\n     *\n     * @private\n     */\n    async getDb() {\n        if (!this._db) {\n            this._db = await openDB(DB_NAME, 1, {\n                upgrade: this._upgradeDbAndDeleteOldDbs.bind(this),\n            });\n        }\n        return this._db;\n    }\n}\nexport { CacheTimestampsModel };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}