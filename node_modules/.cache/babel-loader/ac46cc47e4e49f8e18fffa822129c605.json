{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-first-falling-back-to-cache)\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS](https://enable-cors.org/).\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\n\nclass NetworkFirst extends Strategy {\n  /**\n   * @param {Object} [options]\n   * @param {string} [options.cacheName] Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * {@link workbox-core.cacheNames}.\n   * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} [options.fetchOptions] Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n   * `fetch()` requests made by this strategy.\n   * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n   * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n   * that fail to respond within the timeout will fallback to the cache.\n   *\n   * This option can be used to combat\n   * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n   * scenarios.\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(options); // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n    // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n\n    if (!this.plugins.some(p => 'cacheWillUpdate' in p)) {\n      this.plugins.unshift(cacheOkAndOpaquePlugin);\n    }\n\n    this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (this._networkTimeoutSeconds) {\n        assert.isType(this._networkTimeoutSeconds, 'number', {\n          moduleName: 'workbox-strategies',\n          className: this.constructor.name,\n          funcName: 'constructor',\n          paramName: 'networkTimeoutSeconds'\n        });\n      }\n    }\n  }\n  /**\n   * @private\n   * @param {Request|string} request A request to run this strategy for.\n   * @param {workbox-strategies.StrategyHandler} handler The event that\n   *     triggered the request.\n   * @return {Promise<Response>}\n   */\n\n\n  async _handle(request, handler) {\n    const logs = [];\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-strategies',\n        className: this.constructor.name,\n        funcName: 'handle',\n        paramName: 'makeRequest'\n      });\n    }\n\n    const promises = [];\n    let timeoutId;\n\n    if (this._networkTimeoutSeconds) {\n      const {\n        id,\n        promise\n      } = this._getTimeoutPromise({\n        request,\n        logs,\n        handler\n      });\n\n      timeoutId = id;\n      promises.push(promise);\n    }\n\n    const networkPromise = this._getNetworkPromise({\n      timeoutId,\n      request,\n      logs,\n      handler\n    });\n\n    promises.push(networkPromise);\n    const response = await handler.waitUntil((async () => {\n      // Promise.race() will resolve as soon as the first promise resolves.\n      return (await handler.waitUntil(Promise.race(promises))) || ( // If Promise.race() resolved with null, it might be due to a network\n      // timeout + a cache miss. If that were to happen, we'd rather wait until\n      // the networkPromise resolves instead of returning null.\n      // Note that it's fine to await an already-resolved promise, so we don't\n      // have to check to see if it's still \"in flight\".\n      await networkPromise);\n    })());\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n\n      for (const log of logs) {\n        logger.log(log);\n      }\n\n      messages.printFinalResponse(response);\n      logger.groupEnd();\n    }\n\n    if (!response) {\n      throw new WorkboxError('no-response', {\n        url: request.url\n      });\n    }\n\n    return response;\n  }\n  /**\n   * @param {Object} options\n   * @param {Request} options.request\n   * @param {Array} options.logs A reference to the logs array\n   * @param {Event} options.event\n   * @return {Promise<Response>}\n   *\n   * @private\n   */\n\n\n  _getTimeoutPromise(_ref) {\n    let {\n      request,\n      logs,\n      handler\n    } = _ref;\n    let timeoutId;\n    const timeoutPromise = new Promise(resolve => {\n      const onNetworkTimeout = async () => {\n        if (process.env.NODE_ENV !== 'production') {\n          logs.push(\"Timing out the network response at \" + \"\".concat(this._networkTimeoutSeconds, \" seconds.\"));\n        }\n\n        resolve(await handler.cacheMatch(request));\n      };\n\n      timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n    });\n    return {\n      promise: timeoutPromise,\n      id: timeoutId\n    };\n  }\n  /**\n   * @param {Object} options\n   * @param {number|undefined} options.timeoutId\n   * @param {Request} options.request\n   * @param {Array} options.logs A reference to the logs Array.\n   * @param {Event} options.event\n   * @return {Promise<Response>}\n   *\n   * @private\n   */\n\n\n  async _getNetworkPromise(_ref2) {\n    let {\n      timeoutId,\n      request,\n      logs,\n      handler\n    } = _ref2;\n    let error;\n    let response;\n\n    try {\n      response = await handler.fetchAndCachePut(request);\n    } catch (fetchError) {\n      if (fetchError instanceof Error) {\n        error = fetchError;\n      }\n    }\n\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (response) {\n        logs.push(\"Got response from network.\");\n      } else {\n        logs.push(\"Unable to get a response from the network. Will respond \" + \"with a cached response.\");\n      }\n    }\n\n    if (error || !response) {\n      response = await handler.cacheMatch(request);\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (response) {\n          logs.push(\"Found a cached response in the '\".concat(this.cacheName, \"'\") + \" cache.\");\n        } else {\n          logs.push(\"No response found in the '\".concat(this.cacheName, \"' cache.\"));\n        }\n      }\n    }\n\n    return response;\n  }\n\n}\n\nexport { NetworkFirst };","map":{"version":3,"names":["assert","logger","WorkboxError","cacheOkAndOpaquePlugin","Strategy","messages","NetworkFirst","constructor","options","plugins","some","p","unshift","_networkTimeoutSeconds","networkTimeoutSeconds","process","env","NODE_ENV","isType","moduleName","className","name","funcName","paramName","_handle","request","handler","logs","isInstance","Request","promises","timeoutId","id","promise","_getTimeoutPromise","push","networkPromise","_getNetworkPromise","response","waitUntil","Promise","race","groupCollapsed","strategyStart","log","printFinalResponse","groupEnd","url","timeoutPromise","resolve","onNetworkTimeout","cacheMatch","setTimeout","error","fetchAndCachePut","fetchError","Error","clearTimeout","cacheName"],"sources":["C:/Users/omkar/OneDrive/Pictures/Desktop/weather/weather-app-reactjs/node_modules/workbox-strategies/NetworkFirst.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-first-falling-back-to-cache)\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS](https://enable-cors.org/).\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass NetworkFirst extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will fallback to the cache.\n     *\n     * This option can be used to combat\n     * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n     * scenarios.\n     */\n    constructor(options = {}) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n        if (process.env.NODE_ENV !== 'production') {\n            if (this._networkTimeoutSeconds) {\n                assert.isType(this._networkTimeoutSeconds, 'number', {\n                    moduleName: 'workbox-strategies',\n                    className: this.constructor.name,\n                    funcName: 'constructor',\n                    paramName: 'networkTimeoutSeconds',\n                });\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'makeRequest',\n            });\n        }\n        const promises = [];\n        let timeoutId;\n        if (this._networkTimeoutSeconds) {\n            const { id, promise } = this._getTimeoutPromise({ request, logs, handler });\n            timeoutId = id;\n            promises.push(promise);\n        }\n        const networkPromise = this._getNetworkPromise({\n            timeoutId,\n            request,\n            logs,\n            handler,\n        });\n        promises.push(networkPromise);\n        const response = await handler.waitUntil((async () => {\n            // Promise.race() will resolve as soon as the first promise resolves.\n            return ((await handler.waitUntil(Promise.race(promises))) ||\n                // If Promise.race() resolved with null, it might be due to a network\n                // timeout + a cache miss. If that were to happen, we'd rather wait until\n                // the networkPromise resolves instead of returning null.\n                // Note that it's fine to await an already-resolved promise, so we don't\n                // have to check to see if it's still \"in flight\".\n                (await networkPromise));\n        })());\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs array\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    _getTimeoutPromise({ request, logs, handler, }) {\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve) => {\n            const onNetworkTimeout = async () => {\n                if (process.env.NODE_ENV !== 'production') {\n                    logs.push(`Timing out the network response at ` +\n                        `${this._networkTimeoutSeconds} seconds.`);\n                }\n                resolve(await handler.cacheMatch(request));\n            };\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n        });\n        return {\n            promise: timeoutPromise,\n            id: timeoutId,\n        };\n    }\n    /**\n     * @param {Object} options\n     * @param {number|undefined} options.timeoutId\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs Array.\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getNetworkPromise({ timeoutId, request, logs, handler, }) {\n        let error;\n        let response;\n        try {\n            response = await handler.fetchAndCachePut(request);\n        }\n        catch (fetchError) {\n            if (fetchError instanceof Error) {\n                error = fetchError;\n            }\n        }\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (response) {\n                logs.push(`Got response from network.`);\n            }\n            else {\n                logs.push(`Unable to get a response from the network. Will respond ` +\n                    `with a cached response.`);\n            }\n        }\n        if (error || !response) {\n            response = await handler.cacheMatch(request);\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Found a cached response in the '${this.cacheName}'` + ` cache.`);\n                }\n                else {\n                    logs.push(`No response found in the '${this.cacheName}' cache.`);\n                }\n            }\n        }\n        return response;\n    }\n}\nexport { NetworkFirst };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}