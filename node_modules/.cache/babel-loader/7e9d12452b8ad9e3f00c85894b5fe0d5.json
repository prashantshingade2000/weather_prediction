{"ast":null,"code":"/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n\nfunction toRequest(input) {\n  return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle} or\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */\n\n\nclass StrategyHandler {\n  /**\n   * Creates a new instance associated with the passed strategy and event\n   * that's handling the request.\n   *\n   * The constructor also initializes the state that will be passed to each of\n   * the plugins handling this request.\n   *\n   * @param {workbox-strategies.Strategy} strategy\n   * @param {Object} options\n   * @param {Request|string} options.request A request to run this strategy for.\n   * @param {ExtendableEvent} options.event The event associated with the\n   *     request.\n   * @param {URL} [options.url]\n   * @param {*} [options.params] The return value from the\n   *     {@link workbox-routing~matchCallback} (if applicable).\n   */\n  constructor(strategy, options) {\n    this._cacheKeys = {};\n    /**\n     * The request the strategy is performing (passed to the strategy's\n     * `handle()` or `handleAll()` method).\n     * @name request\n     * @instance\n     * @type {Request}\n     * @memberof workbox-strategies.StrategyHandler\n     */\n\n    /**\n     * The event associated with this request.\n     * @name event\n     * @instance\n     * @type {ExtendableEvent}\n     * @memberof workbox-strategies.StrategyHandler\n     */\n\n    /**\n     * A `URL` instance of `request.url` (if passed to the strategy's\n     * `handle()` or `handleAll()` method).\n     * Note: the `url` param will be present if the strategy was invoked\n     * from a workbox `Route` object.\n     * @name url\n     * @instance\n     * @type {URL|undefined}\n     * @memberof workbox-strategies.StrategyHandler\n     */\n\n    /**\n     * A `param` value (if passed to the strategy's\n     * `handle()` or `handleAll()` method).\n     * Note: the `param` param will be present if the strategy was invoked\n     * from a workbox `Route` object and the\n     * {@link workbox-routing~matchCallback} returned\n     * a truthy value (it will be that value).\n     * @name params\n     * @instance\n     * @type {*|undefined}\n     * @memberof workbox-strategies.StrategyHandler\n     */\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(options.event, ExtendableEvent, {\n        moduleName: 'workbox-strategies',\n        className: 'StrategyHandler',\n        funcName: 'constructor',\n        paramName: 'options.event'\n      });\n    }\n\n    Object.assign(this, options);\n    this.event = options.event;\n    this._strategy = strategy;\n    this._handlerDeferred = new Deferred();\n    this._extendLifetimePromises = []; // Copy the plugins list (since it's mutable on the strategy),\n    // so any mutations don't affect this handler instance.\n\n    this._plugins = [...strategy.plugins];\n    this._pluginStateMap = new Map();\n\n    for (const plugin of this._plugins) {\n      this._pluginStateMap.set(plugin, {});\n    }\n\n    this.event.waitUntil(this._handlerDeferred.promise);\n  }\n  /**\n   * Fetches a given request (and invokes any applicable plugin callback\n   * methods) using the `fetchOptions` (for non-navigation requests) and\n   * `plugins` defined on the `Strategy` object.\n   *\n   * The following plugin lifecycle methods are invoked when using this method:\n   * - `requestWillFetch()`\n   * - `fetchDidSucceed()`\n   * - `fetchDidFail()`\n   *\n   * @param {Request|string} input The URL or request to fetch.\n   * @return {Promise<Response>}\n   */\n\n\n  async fetch(input) {\n    const {\n      event\n    } = this;\n    let request = toRequest(input);\n\n    if (request.mode === 'navigate' && event instanceof FetchEvent && event.preloadResponse) {\n      const possiblePreloadResponse = await event.preloadResponse;\n\n      if (possiblePreloadResponse) {\n        if (process.env.NODE_ENV !== 'production') {\n          logger.log(\"Using a preloaded navigation response for \" + \"'\".concat(getFriendlyURL(request.url), \"'\"));\n        }\n\n        return possiblePreloadResponse;\n      }\n    } // If there is a fetchDidFail plugin, we need to save a clone of the\n    // original request before it's either modified by a requestWillFetch\n    // plugin or before the original request's body is consumed via fetch().\n\n\n    const originalRequest = this.hasCallback('fetchDidFail') ? request.clone() : null;\n\n    try {\n      for (const cb of this.iterateCallbacks('requestWillFetch')) {\n        request = await cb({\n          request: request.clone(),\n          event\n        });\n      }\n    } catch (err) {\n      if (err instanceof Error) {\n        throw new WorkboxError('plugin-error-request-will-fetch', {\n          thrownErrorMessage: err.message\n        });\n      }\n    } // The request can be altered by plugins with `requestWillFetch` making\n    // the original request (most likely from a `fetch` event) different\n    // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n\n\n    const pluginFilteredRequest = request.clone();\n\n    try {\n      let fetchResponse; // See https://github.com/GoogleChrome/workbox/issues/1796\n\n      fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n\n      if (process.env.NODE_ENV !== 'production') {\n        logger.debug(\"Network request for \" + \"'\".concat(getFriendlyURL(request.url), \"' returned a response with \") + \"status '\".concat(fetchResponse.status, \"'.\"));\n      }\n\n      for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n        fetchResponse = await callback({\n          event,\n          request: pluginFilteredRequest,\n          response: fetchResponse\n        });\n      }\n\n      return fetchResponse;\n    } catch (error) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.log(\"Network request for \" + \"'\".concat(getFriendlyURL(request.url), \"' threw an error.\"), error);\n      } // `originalRequest` will only exist if a `fetchDidFail` callback\n      // is being used (see above).\n\n\n      if (originalRequest) {\n        await this.runCallbacks('fetchDidFail', {\n          error: error,\n          event,\n          originalRequest: originalRequest.clone(),\n          request: pluginFilteredRequest.clone()\n        });\n      }\n\n      throw error;\n    }\n  }\n  /**\n   * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n   * the response generated by `this.fetch()`.\n   *\n   * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n   * so you do not have to manually call `waitUntil()` on the event.\n   *\n   * @param {Request|string} input The request or URL to fetch and cache.\n   * @return {Promise<Response>}\n   */\n\n\n  async fetchAndCachePut(input) {\n    const response = await this.fetch(input);\n    const responseClone = response.clone();\n    void this.waitUntil(this.cachePut(input, responseClone));\n    return response;\n  }\n  /**\n   * Matches a request from the cache (and invokes any applicable plugin\n   * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n   * defined on the strategy object.\n   *\n   * The following plugin lifecycle methods are invoked when using this method:\n   * - cacheKeyWillByUsed()\n   * - cachedResponseWillByUsed()\n   *\n   * @param {Request|string} key The Request or URL to use as the cache key.\n   * @return {Promise<Response|undefined>} A matching response, if found.\n   */\n\n\n  async cacheMatch(key) {\n    const request = toRequest(key);\n    let cachedResponse;\n    const {\n      cacheName,\n      matchOptions\n    } = this._strategy;\n    const effectiveRequest = await this.getCacheKey(request, 'read');\n    const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), {\n      cacheName\n    });\n    cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (cachedResponse) {\n        logger.debug(\"Found a cached response in '\".concat(cacheName, \"'.\"));\n      } else {\n        logger.debug(\"No cached response found in '\".concat(cacheName, \"'.\"));\n      }\n    }\n\n    for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n      cachedResponse = (await callback({\n        cacheName,\n        matchOptions,\n        cachedResponse,\n        request: effectiveRequest,\n        event: this.event\n      })) || undefined;\n    }\n\n    return cachedResponse;\n  }\n  /**\n   * Puts a request/response pair in the cache (and invokes any applicable\n   * plugin callback methods) using the `cacheName` and `plugins` defined on\n   * the strategy object.\n   *\n   * The following plugin lifecycle methods are invoked when using this method:\n   * - cacheKeyWillByUsed()\n   * - cacheWillUpdate()\n   * - cacheDidUpdate()\n   *\n   * @param {Request|string} key The request or URL to use as the cache key.\n   * @param {Response} response The response to cache.\n   * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n   * not be cached, and `true` otherwise.\n   */\n\n\n  async cachePut(key, response) {\n    const request = toRequest(key); // Run in the next task to avoid blocking other cache reads.\n    // https://github.com/w3c/ServiceWorker/issues/1397\n\n    await timeout(0);\n    const effectiveRequest = await this.getCacheKey(request, 'write');\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n        throw new WorkboxError('attempt-to-cache-non-get-request', {\n          url: getFriendlyURL(effectiveRequest.url),\n          method: effectiveRequest.method\n        });\n      } // See https://github.com/GoogleChrome/workbox/issues/2818\n\n\n      const vary = response.headers.get('Vary');\n\n      if (vary) {\n        logger.debug(\"The response for \".concat(getFriendlyURL(effectiveRequest.url), \" \") + \"has a 'Vary: \".concat(vary, \"' header. \") + \"Consider setting the {ignoreVary: true} option on your strategy \" + \"to ensure cache matching and deletion works as expected.\");\n      }\n    }\n\n    if (!response) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.error(\"Cannot cache non-existent response for \" + \"'\".concat(getFriendlyURL(effectiveRequest.url), \"'.\"));\n      }\n\n      throw new WorkboxError('cache-put-with-no-response', {\n        url: getFriendlyURL(effectiveRequest.url)\n      });\n    }\n\n    const responseToCache = await this._ensureResponseSafeToCache(response);\n\n    if (!responseToCache) {\n      if (process.env.NODE_ENV !== 'production') {\n        logger.debug(\"Response '\".concat(getFriendlyURL(effectiveRequest.url), \"' \") + \"will not be cached.\", responseToCache);\n      }\n\n      return false;\n    }\n\n    const {\n      cacheName,\n      matchOptions\n    } = this._strategy;\n    const cache = await self.caches.open(cacheName);\n    const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n    const oldResponse = hasCacheUpdateCallback ? await cacheMatchIgnoreParams( // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n    // feature. Consider into ways to only add this behavior if using\n    // precaching.\n    cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions) : null;\n\n    if (process.env.NODE_ENV !== 'production') {\n      logger.debug(\"Updating the '\".concat(cacheName, \"' cache with a new Response \") + \"for \".concat(getFriendlyURL(effectiveRequest.url), \".\"));\n    }\n\n    try {\n      await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n    } catch (error) {\n      if (error instanceof Error) {\n        // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n        if (error.name === 'QuotaExceededError') {\n          await executeQuotaErrorCallbacks();\n        }\n\n        throw error;\n      }\n    }\n\n    for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n      await callback({\n        cacheName,\n        oldResponse,\n        newResponse: responseToCache.clone(),\n        request: effectiveRequest,\n        event: this.event\n      });\n    }\n\n    return true;\n  }\n  /**\n   * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n   * executes any of those callbacks found in sequence. The final `Request`\n   * object returned by the last plugin is treated as the cache key for cache\n   * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n   * been registered, the passed request is returned unmodified\n   *\n   * @param {Request} request\n   * @param {string} mode\n   * @return {Promise<Request>}\n   */\n\n\n  async getCacheKey(request, mode) {\n    const key = \"\".concat(request.url, \" | \").concat(mode);\n\n    if (!this._cacheKeys[key]) {\n      let effectiveRequest = request;\n\n      for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n        effectiveRequest = toRequest(await callback({\n          mode,\n          request: effectiveRequest,\n          event: this.event,\n          // params has a type any can't change right now.\n          params: this.params // eslint-disable-line\n\n        }));\n      }\n\n      this._cacheKeys[key] = effectiveRequest;\n    }\n\n    return this._cacheKeys[key];\n  }\n  /**\n   * Returns true if the strategy has at least one plugin with the given\n   * callback.\n   *\n   * @param {string} name The name of the callback to check for.\n   * @return {boolean}\n   */\n\n\n  hasCallback(name) {\n    for (const plugin of this._strategy.plugins) {\n      if (name in plugin) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Runs all plugin callbacks matching the given name, in order, passing the\n   * given param object (merged ith the current plugin state) as the only\n   * argument.\n   *\n   * Note: since this method runs all plugins, it's not suitable for cases\n   * where the return value of a callback needs to be applied prior to calling\n   * the next callback. See\n   * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\n   * below for how to handle that case.\n   *\n   * @param {string} name The name of the callback to run within each plugin.\n   * @param {Object} param The object to pass as the first (and only) param\n   *     when executing each callback. This object will be merged with the\n   *     current plugin state prior to callback execution.\n   */\n\n\n  async runCallbacks(name, param) {\n    for (const callback of this.iterateCallbacks(name)) {\n      // TODO(philipwalton): not sure why `any` is needed. It seems like\n      // this should work with `as WorkboxPluginCallbackParam[C]`.\n      await callback(param);\n    }\n  }\n  /**\n   * Accepts a callback and returns an iterable of matching plugin callbacks,\n   * where each callback is wrapped with the current handler state (i.e. when\n   * you call each callback, whatever object parameter you pass it will\n   * be merged with the plugin's current state).\n   *\n   * @param {string} name The name fo the callback to run\n   * @return {Array<Function>}\n   */\n\n\n  *iterateCallbacks(name) {\n    for (const plugin of this._strategy.plugins) {\n      if (typeof plugin[name] === 'function') {\n        const state = this._pluginStateMap.get(plugin);\n\n        const statefulCallback = param => {\n          const statefulParam = Object.assign(Object.assign({}, param), {\n            state\n          }); // TODO(philipwalton): not sure why `any` is needed. It seems like\n          // this should work with `as WorkboxPluginCallbackParam[C]`.\n\n          return plugin[name](statefulParam);\n        };\n\n        yield statefulCallback;\n      }\n    }\n  }\n  /**\n   * Adds a promise to the\n   * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n   * of the event event associated with the request being handled (usually a\n   * `FetchEvent`).\n   *\n   * Note: you can await\n   * {@link workbox-strategies.StrategyHandler~doneWaiting}\n   * to know when all added promises have settled.\n   *\n   * @param {Promise} promise A promise to add to the extend lifetime promises\n   *     of the event that triggered the request.\n   */\n\n\n  waitUntil(promise) {\n    this._extendLifetimePromises.push(promise);\n\n    return promise;\n  }\n  /**\n   * Returns a promise that resolves once all promises passed to\n   * {@link workbox-strategies.StrategyHandler~waitUntil}\n   * have settled.\n   *\n   * Note: any work done after `doneWaiting()` settles should be manually\n   * passed to an event's `waitUntil()` method (not this handler's\n   * `waitUntil()` method), otherwise the service worker thread my be killed\n   * prior to your work completing.\n   */\n\n\n  async doneWaiting() {\n    let promise;\n\n    while (promise = this._extendLifetimePromises.shift()) {\n      await promise;\n    }\n  }\n  /**\n   * Stops running the strategy and immediately resolves any pending\n   * `waitUntil()` promises.\n   */\n\n\n  destroy() {\n    this._handlerDeferred.resolve(null);\n  }\n  /**\n   * This method will call cacheWillUpdate on the available plugins (or use\n   * status === 200) to determine if the Response is safe and valid to cache.\n   *\n   * @param {Request} options.request\n   * @param {Response} options.response\n   * @return {Promise<Response|undefined>}\n   *\n   * @private\n   */\n\n\n  async _ensureResponseSafeToCache(response) {\n    let responseToCache = response;\n    let pluginsUsed = false;\n\n    for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n      responseToCache = (await callback({\n        request: this.request,\n        response: responseToCache,\n        event: this.event\n      })) || undefined;\n      pluginsUsed = true;\n\n      if (!responseToCache) {\n        break;\n      }\n    }\n\n    if (!pluginsUsed) {\n      if (responseToCache && responseToCache.status !== 200) {\n        responseToCache = undefined;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (responseToCache) {\n          if (responseToCache.status !== 200) {\n            if (responseToCache.status === 0) {\n              logger.warn(\"The response for '\".concat(this.request.url, \"' \") + \"is an opaque response. The caching strategy that you're \" + \"using will not cache opaque responses by default.\");\n            } else {\n              logger.debug(\"The response for '\".concat(this.request.url, \"' \") + \"returned a status code of '\".concat(response.status, \"' and won't \") + \"be cached as a result.\");\n            }\n          }\n        }\n      }\n    }\n\n    return responseToCache;\n  }\n\n}\n\nexport { StrategyHandler };","map":{"version":3,"names":["assert","cacheMatchIgnoreParams","Deferred","executeQuotaErrorCallbacks","getFriendlyURL","logger","timeout","WorkboxError","toRequest","input","Request","StrategyHandler","constructor","strategy","options","_cacheKeys","process","env","NODE_ENV","isInstance","event","ExtendableEvent","moduleName","className","funcName","paramName","Object","assign","_strategy","_handlerDeferred","_extendLifetimePromises","_plugins","plugins","_pluginStateMap","Map","plugin","set","waitUntil","promise","fetch","request","mode","FetchEvent","preloadResponse","possiblePreloadResponse","log","url","originalRequest","hasCallback","clone","cb","iterateCallbacks","err","Error","thrownErrorMessage","message","pluginFilteredRequest","fetchResponse","undefined","fetchOptions","debug","status","callback","response","error","runCallbacks","fetchAndCachePut","responseClone","cachePut","cacheMatch","key","cachedResponse","cacheName","matchOptions","effectiveRequest","getCacheKey","multiMatchOptions","caches","match","method","vary","headers","get","responseToCache","_ensureResponseSafeToCache","cache","self","open","hasCacheUpdateCallback","oldResponse","put","name","newResponse","params","param","state","statefulCallback","statefulParam","push","doneWaiting","shift","destroy","resolve","pluginsUsed","warn"],"sources":["C:/Users/omkar/OneDrive/Pictures/Desktop/weather/weather-app-reactjs/node_modules/workbox-strategies/StrategyHandler.js"],"sourcesContent":["/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle} or\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params] The return value from the\n     *     {@link workbox-routing~matchCallback} (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * {@link workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = (await event.preloadResponse);\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail')\n            ? request.clone()\n            : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', {\n                    thrownErrorMessage: err.message,\n                });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cachedResponseWillByUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse =\n                (await callback({\n                    cacheName,\n                    matchOptions,\n                    cachedResponse,\n                    request: effectiveRequest,\n                    event: this.event,\n                })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get('Vary');\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\n                    `has a 'Vary: ${vary}' header. ` +\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\n                    `to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback\n            ? await cacheMatchIgnoreParams(\n            // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n            // feature. Consider into ways to only add this behavior if using\n            // precaching.\n            cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions)\n            : null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params, // eslint-disable-line\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while ((promise = this._extendLifetimePromises.shift())) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache =\n                (await callback({\n                    request: this.request,\n                    response: responseToCache,\n                    event: this.event,\n                })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}